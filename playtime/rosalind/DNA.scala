
object DNA {
  def main(args: Array[String]) {

     val data = "ACCCTTGCATCCCCCTAACGGTCGAGCTAAGGGGAGCCTAATCAAGTAATTCTAAGGAGTATTGCGCAGTCGTGGCTTGTGTGCACCAAAAGCAGATACGACGTCGGGAATTCATCTCCTACAACACCAGTATGCGAGCCGCAAGTACCTGCCGATCGGCAGCGGCGTCCGCCTTGCCATCTCCGGCGGGACGTGAATTAACACATCCGTCGAGGTTCAGGGACACACCATCGACCGGAAACCTGCCCCGCCGCTGGACTAGTTTATATACTAAAAATCACGCGCTTGATGTTGTCATTGAGCCGTCCGCCGAACGGTGCACAACCTCAAGCATACCTGGGCTCAGAATAGAATAGATTTAAGATAGGTTAGTTACAATTATGGGCAATAAACATCTAACTCAGATGGTTCCACCCCAAGGATTGAAGAGCATTACGAACGTCTATATTCTTTCCTTAAGTCCTGGTACGCGTTGTACGGCACAAAGCTACATAAAAAATACTCTTTTGTTGACTTCCGCCAAGTAGCGTAGATAGGCATTTTCCAACCTTCGGACCTTGCTCAAGTAGGACCAGTCGTTTCGTGATAACTTGCAGATAAATATCGATTATCTTATATGAGCTTACTGGAGCGGACCTGCCTTGGGCAACCAGGCGCATGTCGCCCGTTGAAACGTGCAACCTAAAGACCTAAACTGTGGTGTAAGTCGCAGAACAATACGTTGACGCGCGCCTCGGGCGCAGGCAAGACTTCACCCAATAGAAACGCGCCCTCTCTTCCTAATGGGCCCTCACGGAGGTTAACTCAAGAGGCAACGACGTGGTTGATATCCCAGTACAAACTACCTATCGTACTACTACCCGACCCCTTGACCGGCAAGGCCAATGGCAAGGCTAGGGCTGTGGGCTGCACTTCTCCACC"
     
     // My initial solution.
     val groupedData = data.groupBy((x) => x)
     val counts = for (x <- "ACGT") yield (x, groupedData(x).length)
     println(counts.mkString(" "))
     
     // Solution from site.
     val m = data.groupBy(identity).map {case (k, v) => k -> v.length}
     val res = "ACGT".map(m).mkString(" ")
     println(res)
   } 
}