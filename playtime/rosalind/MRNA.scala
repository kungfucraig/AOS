
object MRNA extends App {
  val example1 = "MA"
  val example2 = "MQAVNGKGFSRPWSIWYPKQLTYGLNVQAMCWGYNAITGHPQHDEKFCVKVTTVYVNTSRKQSYRMWSMSQCQFAPEFHLGGEKYEHGYFPRDCWFAKKKQMLSNNIEVGRGKHSQRWKGFGETIVTVKFTTFHWCREDFEYPFAHDDMRHNTMVQHIYRHTYYPNDRMQWLTFFCFLHEYMWDRQGFNTHDCCDKPDMINNDAHQYAPIQLTNWWGKYTHGLIPHTLRMSTFTHFNTMLRQKRCVVVDHMWQVNSPCGAHCYTIMDVWFMWKDAHQPVYYRLGWLEAVDWRSHMIARMKVWSVCYFTWGWPHLYAGCQRYDTALDMFGAHTMPRGGGCHIKEYQLFTAHQVKTSIGRCLNWGHHGADTGAYLCLADNVESSFIFAFIYAVNMGDRQKFLCELEHMIMIAQCTDTRGYMKRDVVHSKHFNLPIVWQSFKVRTWNGLYPERAYHIINSDSPNSPVHFCWGSWATEGVYLVCKQLMAWTALAQLPQRRCGGRLEQVITDRMNKYILTLKCYFYPCEVTLIKMNFMTYFWCDPRHPRFWDAPPRAIRDHVHEWQSFLMYNTYRVPRFDYWDSNRHWICYAWLYYNQQEPTFEQDYLLTEAMSCCPHIDEQVYFTDAWMIYAENMNGEHDIVWNSCVDVDMMRSGQNCPSYMMHFFLYTNVAYASFYMDRYREDTCMLMLSKLWAPGFATFVWPLFCACVKDGCGACDTINREHMKRKNIAWQHTFPEKLDRFEIFEDYWHPCKVMTYWVAMVFAKSNSQGYRGVHSDFIGNSVNWPFMHSPCQTGHVMPEVCAGNQMMHPNLQQVKNYPWRGRFGKTLMSKMMHVRTDELGQVCTMTYNEIEHMLDILSIYPIMVFTWYDGLNWSRGVEYWANAQQFTQLWLSFEWYSECTWIIQCNVRHDRAINIHGQNMKECKRESDFYRLRAGLYQWSQGKEPKYVTGTCKCVCACMGLMEQFCRHMNPSDNSTPQVNENAMNVASDSCKLMHIAHIFFA"
  val example3 = "MISLGGQRSSSKWNPSNPYYEHFVSDINNALVPEIDWDGGMQAIVFGDIGAILLGELKYMKPFSCCKHKQTKRHTESIWVVDGEEHHYKMFLPEPFNVKEQEEPQWHHKTAAHIYNCLPMAEGMPMLDQWYMFIAAIANTHCWAPRRGTPIHQGELNKEYQDLGMINEHMYICKLCTAIYEGWWTFCTREDNLEELHMTYPKHSFRHRFYFCSAEPTINGIDPVPDRYQWAKFIPYRFVDDSHNNCKHIRNKTSNCCHEWFRAVTWPFMDNTYHRMAHLWGLIYFSNHCANMMIPARMGSPKCTFVKHTQQGGNDSDVPLPVVRNLVWNFYIEDVTKKDRLDGIWPCHMPDDDNCTNFGAMHLHCEGFAEALKVCDSDGTYSAITLFHAWSAKKDDIKGPSDPSTRPRWYMLGQGTFRAMKVTDPSIGQRINNWDPGHVQGHMKAEMHNFWIGSGWDTERMRQHRKEGDMFDDAGVALNGWIWNGYPAGAFRLNMMWQCDGTDAKTQTVHCTWDDPRLCMIKAANSMLRKMWRSFKSPPCHMKDMLQDTLGFICNCYINAVVKHKIAPGKIAWETPQFQLWVTKQMLIFICPVFFIIWIRTNSYCLCIEWYIIPAGVTQFDLSIHVKLKYQQEIFVYLPAGQRKCWLANDQFELNYLSSLRQDQIDSWRWTVHMHGGDHMSPTRDDEARNVLSSDGEWAFYFDDAGSVQMCVEENNQDWVCNKQGGFMRRLTNDVVRKCFKNAHIPCTFEEAHWMEYYVKGMRMLQSCKCGWWVVAGFDYSTCENPGKCSPIINNSSLKFLNPIVDPMWFMWCFMHEKGWWMITLRKTYNNRPFMKKEYVAADECCWLSTTQPVPCDLQDCPFYSDRIYWIHGTSGMCWISPYCQDSPTDCFAYCHIGTREQSIQFGSSQHCFFYNFKHDLKYFSFKASGYFAVVESWLACMDQDWHWYVPCLQPMGEDCLWVTYHCNTHEAEMFWSEITMPLEWLGMAGWIIEASYWIH"
  
  val proteinString = example3
  println(countPossibleRNASequences(proteinString)) 

  def countPossibleRNASequences(protein: String) = {
    val actual = protein + " "
    actual.map(proteinToMRna).foldLeft(1L)((z, x) => (z * x.length) % 1000000) 
    
  }
  
  def proteinToMRna(protein: Char) : List[String] = {
    protein match {
      case 'A' => List("GCU", "GCA", "GCC", "GCG")
      case 'C' => List("UGU", "UGC")
      case 'D' => List("GAU", "GAC")
      case 'E' => List("GAA", "GAG")
      case 'F' => List("UUU", "UUC")
      case 'G' => List("GGU", "GGC", "GGA", "GGG")
      case 'H' => List("CAU", "CAC")
      case 'I' => List("AUU", "AUC", "AUA")
      case 'K' => List("AAA", "AAG")
      case 'L' => List("CUU", "CUC", "UUA", "UUG", "CUG", "CUA")
      case 'M' => List("AUG")
      case 'N' => List("AAC", "AAU")
      case 'P' => List("CCU", "CCC", "CCA", "CCG")
      case 'Q' => List("CAA", "CAG")
      case 'R' => List("CGU", "CGA", "CGC", "AGA", "CGG", "AGG")
      case 'S' => List("AGU", "AGC", "UCU", "UCC", "UCG", "UCA")
      case 'T' => List("ACU", "ACC", "ACA", "ACG")
      case 'V' => List("GUU", "GUC", "GUA", "GUG")
      case 'W' => List("UGG")
      case 'Y' => List("UAU", "UAC")
      case ' ' => List("UAA", "UAG", "UGA")
      case _ => throw new RuntimeException("Bad protein")
    }
  }
}